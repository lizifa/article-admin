export const data = {
	rief_content: 'Express.js是一个轻量且灵活的Node.js WEB应用框架，可以快速搭建WEB应用。其底层是对Node.js的HTTP模块进行封装，增加路由、中间件等特性，使得用户能搭建应用级别的WEB服务',
	category_id: '',
	cover_image: '',
	edit_type: '',
	html_content:
		'<h1><a id="RESTful_0"></a>RESTful服务</h1>\n<p>REST(Representational State Transfer)的意思是表征状态转移，它是一种基于HTTP协议的网络应用接口风格，充分利用HTTP的方法实现统一风格接口的服务。通过动词（HTTP方法）+名词（请求资源的接口路径）的方式请求资源，赋予接口特定的含义。</p>\n<p>REST风格定义了一系列创建HTTP服务的惯例：</p>\n<ul>\n<li>POST：创建资源</li>\n<li>PUT：更新资源</li>\n<li>GET：读取资源</li>\n<li>DELETE：删除资源</li>\n</ul>\n<p>例如：</p>\n<ol>\n<li>获取所有书籍记录： GET=&gt; /api/books</li>\n<li>获取id为1的书籍： GET =&gt; /api/books/1</li>\n<li>更新id为1的书籍：PUT =&gt; /api/books/1</li>\n<li>删除id为1的书籍：DELETE =&gt; /api/books/1</li>\n<li>创建一条书籍记录：POST =&gt; /api/books</li>\n</ol>\n<h4><a id="Express__RESTful_API_18"></a>Express 构建 RESTful API</h4>\n<p>Express.js是一个轻量且灵活的Node.js WEB应用框架，可以快速搭建WEB应用。其底层是对Node.js的HTTP模块进行封装，增加路由、中间件等特性，使得用户能搭建应用级别的WEB服务。接下来我们就来尝试下一下编辑的的接口，不再需要依赖后端了。</p>\n<ol>\n<li>首先要先创建一个工程目录`` 按住键盘 win+r 打开运行命令弹窗，输入 cmd， 回车进入命令行<br />\n安装express，并新建一个新的express项目</li>\n<li>选择一个自己磁盘的目录，创建一个工程目录，比如 <code>mkdir camp-express &amp;&amp; cd camp-express</code>, 创建一个工程目录并进入该工程。</li>\n<li>初始化该工程 <code>npm init -y</code> 之后会生成一个 package.json 文件。</li>\n</ol>\n<pre><code class="lang-">{\n  &quot;name&quot;: &quot;camp-express&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;\n}\n\n</code></pre>\n<ol start="4">\n<li>我们创建如下开发目录：</li>\n</ol>\n<pre><code class="lang-">&gt; camp-express\n &gt; router \n &gt; src\n &gt; public \n  .gitignore\n  .prettierrc\n  package.json\n</code></pre>\n<p>现在安装项目需要的依赖：</p>\n<pre><code class="lang-">$ npm install -g express body-parser\n</code></pre>\n<pre><code class="lang-">{\n  &quot;name&quot;: &quot;camp-express&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;body-parser&quot;: &quot;^1.19.0&quot;,\n    &quot;express&quot;: &quot;^4.17.1&quot;\n  }\n}\n</code></pre>\n<p>我们先来打开 app.js 创建的 express 的应用</p>\n<pre><code class="lang-">// 引入express框架\nvar express = require(\'express\');\n// 创建网站服务器\nvar app = express();\n// create application/json parser\nvar bodyParser = require(\'body-parser\')\n// create application/x-www-form-urlencoded parser\napp.use(bodyParser.urlencoded({ extended: false}))\napp.use(bodyParser.json())\n\n// 服务器监听6000端口\napp.listen(6000, function () {\n  console.log(\'Example app listening on port 6000!\')\n})\n</code></pre>\n<p>修改一下 <code>package.json</code> 文件</p>\n<pre><code class="lang-">{\n  &quot;name&quot;: &quot;camp-express&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;nodemon src/app.js&quot;,\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;body-parser&quot;: &quot;^1.19.0&quot;,\n    &quot;express&quot;: &quot;^4.17.1&quot;\n  }\n}\n</code></pre>\n<p>现在启动一下这个服务 命令行中输入 <code>yarn start</code></p>\n<pre><code class="lang-">D:\\github\\camp-express&gt;yarn start \nyarn run v1.22.10\n$ nodemon src/app.js\n[nodemon] 2.0.6\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,json  \n[nodemon] starting `node src/app.js`        \nhttp://127.0.0.1:6000\n</code></pre>\n<p>现在创建我们的书籍路由，进入router目录 <code>cd router</code>, 编辑 books.js 文件</p>\n<pre><code class="lang-var">var router = express.Router()\n\nconst books = [\n  { id: 1, name: \'book1\' },\n  { id: 2, name: \'book2\' },\n  { id: 3, name: \'book3\' },\n]\n\nrouter.get(\'/books\', function (req, res) {\n  res.json(books)\n})\n\nrouter.get(\'/books/:id\', function (req, res) {\n  let book = books.find((b) =&gt; b.id === parseInt(req.params.id))\n  if (!book){\n    return res.status(404).json({ msg: \'The book with the given ID not find.\' })\n  }\n  res.json(book)\n})\n\nmodule.exports = router //暴露这个 router模块\n</code></pre>\n<p>回到我们的 <code>app.js</code>, 引入我们刚才编辑的 <code>books.js</code></p>\n<pre><code class="lang-">+ var booksRouter = require(\'../router/books\')\n+ app.use(\'/api\', booksRouter)\n</code></pre>\n<p>处理GET请求</p>\n<p>测试一下我们的接口是否能跑通</p>\n<pre><code class="lang-">Microsoft Windows [版本 10.0.18363.1316]\n(c) 2019 Microsoft Corporation。保留所有权利。\n\nD:\\github\\camp-express&gt;curl http://127.0.0.1:6000/api/books // 获取书籍列表\n[{&quot;id&quot;:1,&quot;name&quot;:&quot;book1&quot;},{&quot;id&quot;:2,&quot;name&quot;:&quot;book2&quot;},{&quot;id&quot;:3,&quot;name&quot;:&quot;book3&quot;}]\n</code></pre>\n<p>所以我们的获取列表数据接口也是成功的</p>\n<pre><code class="lang-">D:\\github\\camp-express&gt;curl http://127.0.0.1:6000/api/books/2 // 获取id为2书籍\n{&quot;id&quot;:2,&quot;name&quot;:&quot;book2&quot;}\n\nD:\\github\\camp-express&gt;curl http://127.0.0.1:6000/api/books/5 // 获取id为5的书籍        \n{&quot;msg&quot;:&quot;The book with the given ID not find.&quot;}\n</code></pre>\n<p>处理POST请求</p>\n<p>现在编辑我们的 <code>books.js</code> 文件</p>\n<pre><code class="lang-">// 使用POST方法添加书籍\n+ router.post(\'/books\', function (req, res) {\n+   const {name} = req.body;\n+   if (name){\n+     return res.status(400).json({ msg: \'参数name不能为空~\' }).end()\n+   }\n+   const book = {\n+       id: books.length + 1,\n+        name\n+   };\n+   books.push(book);\n+   res.json(book).end();\n+ })\n\n</code></pre>\n<p>测试一下我们的新增接口</p>\n<pre><code class="lang-">D:\\github\\camp-express&gt;curl -X POST -s &quot;http://localhost:6000/api/books&quot; -d &quot;name=xiaoshubao&quot; curl -X POST -s &quot;http://localhost:6000/api/books&quot; -d &quot;name=xiaoshubao&quot; // 新增一条\n数据\n{&quot;id&quot;:4,&quot;name&quot;:[&quot;xiaoshubao&quot;,&quot;xiaoshubao&quot;]}{&quot;id&quot;:5,&quot;name&quot;:[&quot;xiaoshubao&quot;,&quot;xiaoshubao&quot;]}\n</code></pre>\n<p>处理PUT请求</p>\n<pre><code class="lang-">+ // 使用PUT方法修改书籍\n+ router.put(\'/books/:id\', (req, res) =&gt; {\n+   let book = books.find((b) =&gt; b.id === parseInt(req.params.id))\n+   const { name } = req.body\n+   if (!book){\n+       return res.status(404).json({ msg: \'The book with the given ID not find.\' })\n+    }     \n+    if (!name) {\n+       return res.status(400).json({ msg: \'参数name不能为空~\' }).end()\n+    }\n+   book.name = name\n+   res.json(book).end()\n+ })\n</code></pre>\n<p>测试PUT方法</p>\n<pre><code class="lang-">D:\\github\\camp-express&gt;curl -X PUT -s &quot;http://localhost:6000/api/books/1&quot; -d &quot;name=change&quot; // 测试修改\n{&quot;id&quot;:1,&quot;name&quot;:&quot;change&quot;}\n</code></pre>\n<p>处理DELETE</p>\n<pre><code class="lang-">+ // 使用DELETE方法删除书籍\n+  router.delete(\'/books/:id\', (req, res) =&gt; {\n+   let book = books.find((b) =&gt; b.id === parseInt(req.params.id))\n+   if (!book) {\n+      return res.status(404).json({ msg: \'The book with the given ID not find.\' })\n+    }\n+    const index = books.indexOf(book)\n+    books.splice(index, 1)\n+    res.json(book).end()\n+  })\n</code></pre>\n<p>测试我们的删除接口</p>\n<pre><code class="lang-">D:\\github\\camp-express&gt;curl -X DELETE -s &quot;http://localhost:6000/api/books/1&quot; // 测试删除\n{&quot;id&quot;:1,&quot;name&quot;:&quot;book1&quot;}\n</code></pre>\n',
	is_english: '',
	is_gfw: '',
	is_original: '1',
	link_url: '',
	mark_content:
		'# RESTful服务\n\n REST(Representational State Transfer)的意思是表征状态转移，它是一种基于HTTP协议的网络应用接口风格，充分利用HTTP的方法实现统一风格接口的服务。通过动词（HTTP方法）+名词（请求资源的接口路径）的方式请求资源，赋予接口特定的含义。\n\n REST风格定义了一系列创建HTTP服务的惯例：\n  -  POST：创建资源\n  -  PUT：更新资源\n  -  GET：读取资源\n  -  DELETE：删除资源\n  \n例如：\n\n1. 获取所有书籍记录： GET=> /api/books\n2. 获取id为1的书籍： GET => /api/books/1\n3. 更新id为1的书籍：PUT => /api/books/1\n4. 删除id为1的书籍：DELETE => /api/books/1\n5. 创建一条书籍记录：POST => /api/books\n\n#### Express 构建 RESTful API\n Express.js是一个轻量且灵活的Node.js WEB应用框架，可以快速搭建WEB应用。其底层是对Node.js的HTTP模块进行封装，增加路由、中间件等特性，使得用户能搭建应用级别的WEB服务。接下来我们就来尝试下一下编辑的的接口，不再需要依赖后端了。\n\n1. 首先要先创建一个工程目录`` 按住键盘 win+r 打开运行命令弹窗，输入 cmd， 回车进入命令行\n安装express，并新建一个新的express项目\n2. 选择一个自己磁盘的目录，创建一个工程目录，比如 `mkdir camp-express && cd camp-express`, 创建一个工程目录并进入该工程。\n3. 初始化该工程 `npm init -y` 之后会生成一个 package.json 文件。\n```\n{\n  "name": "camp-express",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n\n```\n \n4. 我们创建如下开发目录：\n```\n> camp-express\n > router \n > src\n > public \n  .gitignore\n  .prettierrc\n  package.json\n```\n\n现在安装项目需要的依赖：\n```\n$ npm install -g express body-parser\n```\n\n```\n{\n  "name": "camp-express",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n    "body-parser": "^1.19.0",\n    "express": "^4.17.1"\n  }\n}\n```\n\n我们先来打开 app.js 创建的 express 的应用\n```\n// 引入express框架\nvar express = require(\'express\');\n// 创建网站服务器\nvar app = express();\n// create application/json parser\nvar bodyParser = require(\'body-parser\')\n// create application/x-www-form-urlencoded parser\napp.use(bodyParser.urlencoded({ extended: false}))\napp.use(bodyParser.json())\n\n// 服务器监听6000端口\napp.listen(6000, function () {\n  console.log(\'Example app listening on port 6000!\')\n})\n```\n\n修改一下 `package.json` 文件\n```\n{\n  "name": "camp-express",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "start": "nodemon src/app.js",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n    "body-parser": "^1.19.0",\n    "express": "^4.17.1"\n  }\n}\n```\n\n现在启动一下这个服务 命令行中输入 `yarn start`\n```\nD:\\github\\camp-express>yarn start \nyarn run v1.22.10\n$ nodemon src/app.js\n[nodemon] 2.0.6\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,json  \n[nodemon] starting `node src/app.js`        \nhttp://127.0.0.1:6000\n```\n\n现在创建我们的书籍路由，进入router目录 `cd router`, 编辑 books.js 文件\n\n```var express = require(\'express\')\nvar router = express.Router()\n\nconst books = [\n  { id: 1, name: \'book1\' },\n  { id: 2, name: \'book2\' },\n  { id: 3, name: \'book3\' },\n]\n\nrouter.get(\'/books\', function (req, res) {\n  res.json(books)\n})\n\nrouter.get(\'/books/:id\', function (req, res) {\n  let book = books.find((b) => b.id === parseInt(req.params.id))\n  if (!book){\n    return res.status(404).json({ msg: \'The book with the given ID not find.\' })\n  }\n  res.json(book)\n})\n\nmodule.exports = router //暴露这个 router模块\n```\n\n回到我们的 `app.js`, 引入我们刚才编辑的 `books.js`\n\n\n```\n+ var booksRouter = require(\'../router/books\')\n+ app.use(\'/api\', booksRouter)\n```\n\n处理GET请求\n\n测试一下我们的接口是否能跑通\n```\nMicrosoft Windows [版本 10.0.18363.1316]\n(c) 2019 Microsoft Corporation。保留所有权利。\n\nD:\\github\\camp-express>curl http://127.0.0.1:6000/api/books // 获取书籍列表\n[{"id":1,"name":"book1"},{"id":2,"name":"book2"},{"id":3,"name":"book3"}]\n```\n所以我们的获取列表数据接口也是成功的\n\n\n```\nD:\\github\\camp-express>curl http://127.0.0.1:6000/api/books/2 // 获取id为2书籍\n{"id":2,"name":"book2"}\n\nD:\\github\\camp-express>curl http://127.0.0.1:6000/api/books/5 // 获取id为5的书籍        \n{"msg":"The book with the given ID not find."}\n```\n\n处理POST请求\n\n现在编辑我们的 `books.js` 文件\n```\n// 使用POST方法添加书籍\n+ router.post(\'/books\', function (req, res) {\n+   const {name} = req.body;\n+   if (name){\n+     return res.status(400).json({ msg: \'参数name不能为空~\' }).end()\n+   }\n+   const book = {\n+       id: books.length + 1,\n+        name\n+   };\n+   books.push(book);\n+   res.json(book).end();\n+ })\n\n```\n\n测试一下我们的新增接口\n```\nD:\\github\\camp-express>curl -X POST -s "http://localhost:6000/api/books" -d "name=xiaoshubao" curl -X POST -s "http://localhost:6000/api/books" -d "name=xiaoshubao" // 新增一条\n数据\n{"id":4,"name":["xiaoshubao","xiaoshubao"]}{"id":5,"name":["xiaoshubao","xiaoshubao"]}\n```\n\n处理PUT请求\n\n```\n+ // 使用PUT方法修改书籍\n+ router.put(\'/books/:id\', (req, res) => {\n+   let book = books.find((b) => b.id === parseInt(req.params.id))\n+   const { name } = req.body\n+   if (!book){\n+       return res.status(404).json({ msg: \'The book with the given ID not find.\' })\n+    }     \n+    if (!name) {\n+       return res.status(400).json({ msg: \'参数name不能为空~\' }).end()\n+    }\n+   book.name = name\n+   res.json(book).end()\n+ })\n```\n\n测试PUT方法\n```\nD:\\github\\camp-express>curl -X PUT -s "http://localhost:6000/api/books/1" -d "name=change" // 测试修改\n{"id":1,"name":"change"}\n```\n\n处理DELETE\n```\n+ // 使用DELETE方法删除书籍\n+  router.delete(\'/books/:id\', (req, res) => {\n+   let book = books.find((b) => b.id === parseInt(req.params.id))\n+   if (!book) {\n+      return res.status(404).json({ msg: \'The book with the given ID not find.\' })\n+    }\n+    const index = books.indexOf(book)\n+    books.splice(index, 1)\n+    res.json(book).end()\n+  })\n```\n\n测试我们的删除接口\n```\nD:\\github\\camp-express>curl -X DELETE -s "http://localhost:6000/api/books/1" // 测试删除\n{"id":1,"name":"book1"}\n```',
	tag_ids: ['6809637769959178254', '6809637767543259144', '6809635626879549454'],
	title: '使用Express构建你的RESTful API',
	id: 'ff288baf4f66f33ad67f530e60690207',
};
