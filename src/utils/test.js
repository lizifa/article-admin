export const data = {
  id: '87edbda21d57e869ec5a5f912ef2a6e2',
  rief_content:
    'npm install 命令用来安装模块到node_modules目录。 安装之前，npm install会先检查，node_modules目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。 如果想更新已安装模块，就要用到npm…',
  category_id: '',
  cover_image: '',
  edit_type: '',
  html_content:
    '\n<h1><a id="npm_1"></a>npm是什么</h1>\n<blockquote>\n<p>npm 是Node 的模块管理器，功能极其强大。 它是Node 获得成功的重要原因之一。 正因为有了npm，我们只要一行命令，就能安装别人写好的模块。</p>\n</blockquote>\n<h3><a id="npm_install_5"></a><strong>npm install</strong></h3>\n<p><a href="https://docs.npmjs.com/cli/install" target="_blank"><code>npm install</code></a> 命令用来安装模块到<code>node_modules</code>目录。</p>\n<pre><code class="lang-">$ npm install &lt;packageName&gt; \n--save-dev -D 本地\n--save -S 生产\n-g 全局\n$ npm uninstall &lt;packageName&gt;\n</code></pre>\n<p>安装之前，<code>npm install</code>会先检查，<code>node_modules</code>目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>\n<p>如果你希望，一个模块不管是否安装过，npm 都要<strong>强制重新安装</strong>（不需要删掉nodemodules），可以使用<code>-f</code>或<code>--force</code>参数</p>\n<pre><div class="hljs"><code class="lang-bash">$ npm install &lt;packageName&gt; --force // 强制更新\n</code></div></pre>\n<h3><a id="npm_update_25"></a><strong>npm update</strong></h3>\n<p>如果想更新已安装模块，就要用到<a href="https://docs.npmjs.com/cli/update" target="_blank"><code>npm update</code></a>命令。</p>\n<blockquote>\n<pre><div class="hljs"><code class="lang-bash">$ npm update &lt;packageName&gt;\n</code></div></pre>\n</blockquote>\n<p>它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。</p>\n<h3><a id="_35"></a><strong>模块的安装过程</strong></h3>\n<ol>\n<li>发出<code>npm install</code>命令</li>\n<li>npm 向 registry 查询模块压缩包的网址</li>\n<li>下载压缩包，存放在<code>~/.npm</code>目录</li>\n<li>解压压缩包到当前项目的<code>node_modules</code>目录</li>\n</ol>\n<h1><a id="npm_44"></a>npm常用指令</h1>\n<pre><div class="hljs"><code class="lang-js">npm init --yes(初始化配置)  -y\n\nnpm i (会根据package.json里面的键dependencies，devDependencies来安装相对应的包)\n\nnpm i 包(默认安装一个最新的包，这个包在node_modules文件夹里面，并且会更新在你的package.json文件)\n\nnpm i 包@<span class="hljs-number">3.0</span><span class="hljs-number">.0</span>（安装一个指定版本的包，会更新在你的package.json文件）\n\nnpm i 包 --save-dev(安装一个开发环境所需要的包，会更新在你的package.json文件) -D\nnpm i 包 --save(安装一个生产环境所需要的包，会更新在你的package.json文件) -S\n\nnpm uninstall 包（卸载一个包，会更新在你的package.json文件）\n\nnpm update 包(更新此包版本为最新版本，会更新在你的package.json文件)\n\nnpm run 脚本键(会根据package.json里面的<span class="hljs-string">"scripts"</span>里面的脚本键自动执行相对于的值)\n\nnpm publish  (根据package.json的name发布一个包) 发布到npm仓库\n\nnpm unpublish 包名 --force(卸载npm网站上自己上传的包)\n</code></div></pre>\n<h1><a id="packageJson_69"></a>packageJson文件配置</h1>\n<pre><div class="hljs"><code class="lang-json">{\n\t<span class="hljs-attr">"name"</span>: <span class="hljs-string">"axios"</span>, //发布的包名，默认是上级文件夹名。不得与现在npm中的包名重复。包名不能有大写字母/空格/下滑线!\n  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"2.2.2"</span>,//你这个包的版本，默认是1.0.0。对于npm包的版本号有着一系列的规则，模块的版本号采用X.Y.Z的格式，具体体现为：\n  1、修复bug，小改动，增加z。\n  2、增加新特性，可向后兼容，增加y\n  3、有很大的改动，无法向下兼容,增加x\n  <span class="hljs-attr">"description"</span>: <span class="hljs-string">"用来请求接口，懂了吗二货"</span>, // 介绍\n  <span class="hljs-attr">"main"</span>: <span class="hljs-string">"index.js"</span>,// 入口文件，默认是Index.js，可以修改成自己的文件,这个很重要，当你在实际项目使用的时候，let a = require(<span class="hljs-attr">"包名"</span>)，它就去会去找对应的文件路径哦。\n  <span class="hljs-attr">"scripts"</span>: {                  // 快捷命令，在package.json同目录下输入命令 npm run 键 就会执行 相对应的命令\n    <span class="hljs-attr">"bulid"</span>: <span class="hljs-string">"npx webpack --config myConfig.js"</span>,\n  \t<span class="hljs-attr">"start"</span>: <span class="hljs-string">"xxx"</span>,\n  \t//例如 输入 npm run bulid 就会执行npx webpack --config myConfig.js的命令 。\n  \t// npm start 省略run\n  },\n  <span class="hljs-attr">"keywords"</span>: [],\n  <span class="hljs-attr">"author"</span>: <span class="hljs-string">"王二蛋"</span>,\n  <span class="hljs-attr">"license"</span>: <span class="hljs-string">"ISC"</span>,// 这个直接回车，开源文件协议吧，也可以是MIT，看需要吧。\n  <span class="hljs-attr">"dependencies"</span>: {             // 生产环境所依赖的包\n    <span class="hljs-attr">"jquery"</span>: <span class="hljs-string">"^3.4.1"</span>,\n    <span class="hljs-attr">"sea"</span>: <span class="hljs-string">"^1.0.2"</span>\n  },\n  <span class="hljs-attr">"devDependencies"</span>: {          // 开发环境所依赖的包\n    <span class="hljs-attr">"webpack"</span>: <span class="hljs-string">"^4.41.6"</span>\n  }\n}\n</code></div></pre>\n<h1><a id="npm_101"></a>更改npm默认的下载路径和缓存路径</h1>\n<p>npm config ls 命令可查看npm的安装信息以及默认的下载路径。</p>\n<pre><div class="hljs"><code class="lang-bash">D:\\software\\cmder\\cmder&gt;npm config ls\n; cli configs\nmetrics-registry = <span class="hljs-string">"https://registry.npmjs.org/"</span>\nscope = <span class="hljs-string">""</span>\nuser-agent = <span class="hljs-string">"npm/6.13.4 node/v12.14.0 win32 x64"</span>\n\n; <span class="hljs-built_in">builtin</span> config undefined\nprefix = <span class="hljs-string">"C:\\\\Users\\\\DELL\\\\AppData\\\\Roaming\\\\npm"</span>\n\n; node bin location = D:\\SoftWareInstall\\nodejsIns\\node.exe\n; cwd = D:\\software\\cmder\\cmder\n; HOME = C:\\Users\\DELL\n; <span class="hljs-string">"npm config ls -l"</span> to show all defaults.\n</code></div></pre>\n<p>注意，npm默认的下载路径在C:\\Users\\DELL\\AppData\\Roaming\\npm，其中AppData是隐藏文件夹，在【查看】菜单中勾选【隐藏的项目】才可以看到AppData文件夹。</p>\n<p>???</p>\n<pre><div class="hljs"><code class="lang-java"><span class="hljs-comment">// 更改npm默认的缓存路径</span>\nnpm config set cache <span class="hljs-string">"D:\\TempDate\\nodedata\\cache"</span>\n\n<span class="hljs-comment">// 更改npm默认的下载路径</span>\nnpm config set prefix <span class="hljs-string">"D:\\TempDate\\nodedata\\download"</span>\n</code></div></pre>\n<p>更改缓存路径和下载路径后，再次查看</p>\n<pre><div class="hljs"><code class="lang-java">D:\\software\\cmder\\cmder&gt;npm config ls\n\n; userconfig C:\\Users\\DELL\\.npmrc\ncache = <span class="hljs-string">"D:\\\\TempDate\\\\nodedata\\\\cache"</span>\nprefix = <span class="hljs-string">"D:\\\\TempDate\\\\nodedata\\\\download"</span>\n</code></div></pre>\n<p>那么下面来介绍一下,如何创建自己的第一个node模块,并把这个模块上传到npm上面,让别人可以用我们的模块</p>\n<h1><a id="node_150"></a>创建第一个node模块</h1>\n<p>Node.js模块就是发布到npm的代码包，</p>\n<blockquote>\n<p>创建一个新模块的第一步就是创建一个package.json文件。<br />\n你可以用npm init来创建package.json文件。<br />\n这个过程中命令行会逐步提示你输入这个模块的信息，<br />\n其中模块的名字和版本号是必填项</p>\n</blockquote>\n<blockquote>\n<p>你还需要一个入口文件，<br />\n如果你使用默认值的话，那就会是index.js.<br />\n创建完package.json文件之后，你就要开始写代码包里的内容了，<br />\n这里举个最简单的例子，在默认的index.js里写一个要导出的函数，<br />\n这个函数也就是别人的代码里可以import或者require的。</p>\n</blockquote>\n<pre><div class="hljs"><code class="lang-jsx">exports.showMsg = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"This is my first module"</span>);\n};\n</code></div></pre>\n<p>这样的话,你的node模块就已经创建完成了</p>\n<h3><a id="npm_174"></a>如何发布到npm服务器上</h3>\n<h5><a id="npm_176"></a>注册一个npm账号</h5>\n<h5><a id="npm_login__178"></a>首次需要登录,<strong>npm login</strong> 存储证书到本地,后面就不需要每次都登录的</h5>\n<p>登录需要输入用户名,密码,还有邮箱,这些都是刚刚注册时候填写的<br />\nUserName： (<em><strong><strong><strong>)<br />\nPassword： (</strong></strong></strong></em>)<br />\nEmial： (*******)</p>\n<h5><a id="_185"></a>开始发布</h5>\n<p><strong>npm publish</strong> 发布包</p>\n<blockquote>\n<p>使用 cnpm 的注意报错：<br />\nno_perms Private mode enable, only admin can publish this module<br />\n设置回原本的就可以了<br />\n**npm config set registry <a href="https://link.jianshu.com?t=http://registry.npmjs.org" target="_blank">http://registry.npmjs.org</a> **<br />\n发布完成之后,如果还想回到之前的cnpm,使用下面的命令<br />\n<strong>npm config set registry <a href="https://link.jianshu.com?t=https://registry.npm.taobao.org" target="_blank">https://registry.npm.taobao.org</a></strong></p>\n</blockquote>\n<h3><a id="_196"></a>创建一个案例,引用刚上传的包</h3>\n<p>​</p>\n<blockquote>\n<p>假设已经成功发布了，并且包名叫做<strong>toniqian-test-module</strong>，<br />\n这时候可以新建一个空目录，cd进去，运行npm install toniqian-test-module，然后在这个目录下会出现一个叫node_modules的文件夹，你之前写的包就会出现在这个文件夹下面。</p>\n</blockquote>\n<p>然后写一个index.js,代码如下</p>\n<pre><div class="hljs"><code class="lang-jsx"><span class="hljs-keyword">var</span> test = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'toniqian-test-module\'</span>);\ntest.showMsg();\n</code></div></pre>\n<p>运行index.js</p>\n<pre><div class="hljs"><code class="lang-css"><span class="hljs-selector-tag">node</span> <span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.js</span>\n</code></div></pre>\n<p>那么刚刚上传的包,目前已经可以使用,到目前的话,<br />\n你已经成功创建了一个npm包了</p>\n<h3><a id="npm_223"></a>如何更新npm包</h3>\n<p>当你包的内容修改之后,比如</p>\n<pre><div class="hljs"><code class="lang-jsx">exports.showMsg = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"This is my second module"</span>);\n};\n</code></div></pre>\n<blockquote>\n<p>修改了提示文字,那么我们需要 <strong>npm version &lt;update_type&gt;</strong><br />\n<strong>update_type</strong>就是版本号的意思,会自动更新<strong>package.json</strong>里面的版本号<br />\n然后重新 <strong>npm publish</strong>,更新就会完成</p>\n</blockquote>\n<p><strong>作业</strong> 实现一个相对时间转换函数</p>\n<pre><div class="hljs"><code class="lang-jsx">moment(time){\n  <span class="hljs-comment">// 相对时间转换</span>\n}\n</code></div></pre>\n<h3><a id="npm_247"></a>如何删除npm包</h3>\n<pre><code class="lang-">npm unpublish kk-a-test --force\n</code></pre>\n<h3><a id="npm_253"></a>查看当前登录的npm账号</h3>\n<pre><code class="lang-">npm whoami\n</code></pre>\n<p>输出 username</p>\n<h1><a id="_261"></a><strong>发布包错误集锦</strong></h1>\n<p>1、需要提高版本号</p>\n<pre><div class="hljs"><code class="lang-ruby"><span class="hljs-comment">#1、发包 npm publish 失败</span>\nsh-<span class="hljs-symbol">neverleave:</span>z-tool neverleave$ npm publish\nnpm ERR! publish Failed PUT <span class="hljs-number">400</span>\nnpm ERR! code E40<span class="hljs-number">0</span>\nnpm ERR! deprecations must be strings : z-tool\n\nnpm ERR! A complete log of this run can be found <span class="hljs-symbol">in:</span>\nnpm ERR!     <span class="hljs-regexp">/Users/neverleave</span><span class="hljs-regexp">/.npm/</span>_logs/<span class="hljs-number">2018</span>-<span class="hljs-number">11</span>-<span class="hljs-number">23</span>T10_52_01_742Z-debug.log\nsh-<span class="hljs-symbol">neverleave:</span>z-tool neverleave$ npm publish\n\n\n<span class="hljs-comment">#2、发包 npm publish 失败</span>\nsh-<span class="hljs-symbol">neverleave:</span>z-tool neverleave$ npm publish\nnpm ERR! publish Failed PUT <span class="hljs-number">403</span>\nnpm ERR! code E403\nnpm ERR! You cannot publish over the previously published <span class="hljs-symbol">versions:</span> <span class="hljs-number">1.0</span>.<span class="hljs-number">3</span>. : z-tool\n\nnpm ERR! A complete log of this run can be found <span class="hljs-symbol">in:</span>\nnpm ERR!     <span class="hljs-regexp">/Users/neverleave</span><span class="hljs-regexp">/.npm/</span>_logs/<span class="hljs-number">2018</span>-<span class="hljs-number">11</span>-<span class="hljs-number">23</span>T11_24_57_662Z-debug.log\nsh-<span class="hljs-symbol">neverleave:</span>z-tool neverleave$ \n</code></div></pre>\n<p>2、发包 npm publish 失败<br />\n解决方案：终端执行： npm publish --access public</p>\n<p>参考：https://stackoverflow.com/questions/53420758/npm-publish-gives-unscoped-packages-cannot-be-private</p>\n<pre><div class="hljs"><code class="lang-ruby"><span class="hljs-comment">#1、发包 npm publish 失败</span>\nsh-<span class="hljs-symbol">neverleave:</span>npm neverleave$ npm publish\nnpm ERR! publish Failed PUT <span class="hljs-number">400</span>\nnpm ERR! code E40<span class="hljs-number">0</span>\nnpm ERR! unscoped packages cannot be private : z-tool\n\nnpm ERR! A complete log of this run can be found <span class="hljs-symbol">in:</span>\nnpm ERR!     <span class="hljs-regexp">/Users/neverleave</span><span class="hljs-regexp">/.npm/</span>_logs/<span class="hljs-number">2018</span>-<span class="hljs-number">11</span>-<span class="hljs-number">23</span>T08_44_21_310Z-debug.log\nsh-<span class="hljs-symbol">neverleave:</span>npm neverleave$ \n\n<span class="hljs-comment">#解决方案：终端执行： npm publish --access public</span>\nsh-<span class="hljs-symbol">neverleave:</span>npm neverleave$ npm publish --access public\n+ z-tool@1.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>\nsh-<span class="hljs-symbol">neverleave:</span>npm neverleave$ \n</code></div></pre>\n<p>3、确保登录的用户账号正确</p>\n<pre><div class="hljs"><code class="lang-swift">sh-neverleave:npm neverleave$ npm publish\nnpm <span class="hljs-type">ERR</span>! publish <span class="hljs-type">Failed</span> <span class="hljs-type">PUT</span> <span class="hljs-number">404</span>\nnpm <span class="hljs-type">ERR</span>! code <span class="hljs-type">E404</span>\nnpm <span class="hljs-type">ERR</span>! <span class="hljs-number">404</span> <span class="hljs-type">User</span> not found : z-tool\nnpm <span class="hljs-type">ERR</span>! <span class="hljs-number">404</span> \nnpm <span class="hljs-type">ERR</span>! <span class="hljs-number">404</span>  \'z-tool\' <span class="hljs-keyword">is</span> not <span class="hljs-keyword">in</span> the npm registry.\nnpm <span class="hljs-type">ERR</span>! <span class="hljs-number">404</span> <span class="hljs-type">You</span> should bug the author to publish it (or use the name yourself!)\nnpm <span class="hljs-type">ERR</span>! <span class="hljs-number">404</span> \nnpm <span class="hljs-type">ERR</span>! <span class="hljs-number">404</span> <span class="hljs-type">Note</span> that you can also install from a\nnpm <span class="hljs-type">ERR</span>! <span class="hljs-number">404</span> tarball, folder, http url, or git url.\n\nnpm <span class="hljs-type">ERR</span>! <span class="hljs-type">A</span> complete log of this run can be found <span class="hljs-keyword">in</span>:\nnpm <span class="hljs-type">ERR</span>!     /<span class="hljs-type">Users</span>/neverleave/.npm/_logs/<span class="hljs-number">2018</span>-<span class="hljs-number">11</span>-23T07_32_28_518Z-debug.log\n</code></div></pre>\n<p>4、登录时需要在username 前加‘~’，具体大家可以验证</p>\n<pre><div class="hljs"><code class="lang-kotlin">sh-neverleave:npm neverleave$ npm login\nUsername: (~neverleave) neverleave\nPassword: (&lt;<span class="hljs-keyword">default</span> hidden&gt;) \nEmail: (<span class="hljs-keyword">this</span> IS <span class="hljs-keyword">public</span>) (<span class="hljs-number">1063588359</span><span class="hljs-meta">@qq</span>.com) \nnpm ERR! code EAUTHIP\nnpm ERR! Unable to authenticate, need: Basic\n\nnpm ERR! A complete log of <span class="hljs-keyword">this</span> run can be found <span class="hljs-keyword">in</span>:\nnpm ERR!     /Users/neverleave/.npm/_logs/<span class="hljs-number">2018</span><span class="hljs-number">-11</span><span class="hljs-number">-23</span>T07_27_50_877Z-debug.log\nsh-neverleave:npm neverleave$ \n</code></div></pre>\n<p>5、无权限删除线上的包（撤包有时间限制，24小时）<br />\n解决方案：加上 --force</p>\n<pre><div class="hljs"><code class="lang-bash">sh-neverleave:z-tool neverleave$ npm unpublish z-tool\nnpm ERR! Refusing to delete entire project.\nnpm ERR! Run with --force to <span class="hljs-keyword">do</span> this.\nnpm ERR! npm unpublish [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]\nsh-neverleave:z-tool neverleave$ \n\n<span class="hljs-comment">#解决方案（内部有被鄙视的话，😄 I sure hope you know what you are doing.）</span>\nsh-neverleave:z-tool neverleave$ npm unpublish z-tool --force\nnpm WARN using --force I sure hope you know what you are doing.\n- z-tool\nsh-neverleave:z-tool neverleave$ \n</code></div></pre>\n<p>6、删除npm市场的包同名的24小时后才能重新发布</p>\n<pre><div class="hljs"><code class="lang-ruby">sh-<span class="hljs-symbol">neverleave:</span>z-tool neverleave$ npm publish\nnpm ERR! publish Failed PUT <span class="hljs-number">403</span>\nnpm ERR! code E403\nnpm ERR! z-tool cannot be republished <span class="hljs-keyword">until</span> <span class="hljs-number">24</span> hours have passed. : z-tool\n\nnpm ERR! A complete log of this run can be found <span class="hljs-symbol">in:</span>\nnpm ERR!     <span class="hljs-regexp">/Users/neverleave</span><span class="hljs-regexp">/.npm/</span>_logs/<span class="hljs-number">2018</span>-<span class="hljs-number">11</span>-<span class="hljs-number">23</span>T11_41_24_086Z-debug.log\nsh-<span class="hljs-symbol">neverleave:</span>z-tool neverleave$ \n</code></div></pre>\n',
  is_english: '',
  is_gfw: '',
  is_original: '1',
  link_url: '',
  mark_content:
    '\n# npm是什么\n\n> npm 是Node 的模块管理器，功能极其强大。 它是Node 获得成功的重要原因之一。 正因为有了npm，我们只要一行命令，就能安装别人写好的模块。\n\n### **npm install**\n\n[`npm install`](https://docs.npmjs.com/cli/install) 命令用来安装模块到`node_modules`目录。\n\n```\n$ npm install <packageName> \n--save-dev -D 本地\n--save -S 生产\n-g 全局\n$ npm uninstall <packageName>\n```\n\n安装之前，`npm install`会先检查，`node_modules`目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\n\n如果你希望，一个模块不管是否安装过，npm 都要**强制重新安装**（不需要删掉nodemodules），可以使用`-f`或`--force`参数\n\n```bash\n$ npm install <packageName> --force // 强制更新\n```\n\n### **npm update**\n\n如果想更新已安装模块，就要用到[`npm update`](https://docs.npmjs.com/cli/update)命令。\n\n> ```bash\n> $ npm update <packageName>\n> ```\n\n它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。\n\n### **模块的安装过程**\n\n1. 发出`npm install`命令\n2. npm 向 registry 查询模块压缩包的网址\n3. 下载压缩包，存放在`~/.npm`目录\n4. 解压压缩包到当前项目的`node_modules`目录\n\n\n\n# npm常用指令\n\n```js\nnpm init --yes(初始化配置)  -y\n\nnpm i (会根据package.json里面的键dependencies，devDependencies来安装相对应的包)\n\nnpm i 包(默认安装一个最新的包，这个包在node_modules文件夹里面，并且会更新在你的package.json文件)\n\nnpm i 包@3.0.0（安装一个指定版本的包，会更新在你的package.json文件）\n\nnpm i 包 --save-dev(安装一个开发环境所需要的包，会更新在你的package.json文件) -D\nnpm i 包 --save(安装一个生产环境所需要的包，会更新在你的package.json文件) -S\n\nnpm uninstall 包（卸载一个包，会更新在你的package.json文件）\n\nnpm update 包(更新此包版本为最新版本，会更新在你的package.json文件)\n\nnpm run 脚本键(会根据package.json里面的"scripts"里面的脚本键自动执行相对于的值)\n\nnpm publish  (根据package.json的name发布一个包) 发布到npm仓库\n\nnpm unpublish 包名 --force(卸载npm网站上自己上传的包)\n```\n\n# packageJson文件配置\n\n```json\n{\n\t"name": "axios", //发布的包名，默认是上级文件夹名。不得与现在npm中的包名重复。包名不能有大写字母/空格/下滑线!\n  "version": "2.2.2",//你这个包的版本，默认是1.0.0。对于npm包的版本号有着一系列的规则，模块的版本号采用X.Y.Z的格式，具体体现为：\n  1、修复bug，小改动，增加z。\n  2、增加新特性，可向后兼容，增加y\n  3、有很大的改动，无法向下兼容,增加x\n  "description": "用来请求接口，懂了吗二货", // 介绍\n  "main": "index.js",// 入口文件，默认是Index.js，可以修改成自己的文件,这个很重要，当你在实际项目使用的时候，let a = require("包名")，它就去会去找对应的文件路径哦。\n  "scripts": {                  // 快捷命令，在package.json同目录下输入命令 npm run 键 就会执行 相对应的命令\n    "bulid": "npx webpack --config myConfig.js",\n  \t"start": "xxx",\n  \t//例如 输入 npm run bulid 就会执行npx webpack --config myConfig.js的命令 。\n  \t// npm start 省略run\n  },\n  "keywords": [],\n  "author": "王二蛋",\n  "license": "ISC",// 这个直接回车，开源文件协议吧，也可以是MIT，看需要吧。\n  "dependencies": {             // 生产环境所依赖的包\n    "jquery": "^3.4.1",\n    "sea": "^1.0.2"\n  },\n  "devDependencies": {          // 开发环境所依赖的包\n    "webpack": "^4.41.6"\n  }\n}\n```\n\n\n\n# 更改npm默认的下载路径和缓存路径\n\nnpm config ls 命令可查看npm的安装信息以及默认的下载路径。\n\n\n\n```bash\nD:\\software\\cmder\\cmder>npm config ls\n; cli configs\nmetrics-registry = "https://registry.npmjs.org/"\nscope = ""\nuser-agent = "npm/6.13.4 node/v12.14.0 win32 x64"\n\n; builtin config undefined\nprefix = "C:\\\\Users\\\\DELL\\\\AppData\\\\Roaming\\\\npm"\n\n; node bin location = D:\\SoftWareInstall\\nodejsIns\\node.exe\n; cwd = D:\\software\\cmder\\cmder\n; HOME = C:\\Users\\DELL\n; "npm config ls -l" to show all defaults.\n```\n\n注意，npm默认的下载路径在C:\\Users\\DELL\\AppData\\Roaming\\npm，其中AppData是隐藏文件夹，在【查看】菜单中勾选【隐藏的项目】才可以看到AppData文件夹。\n\n???\n\n```java\n// 更改npm默认的缓存路径\nnpm config set cache "D:\\TempDate\\nodedata\\cache"\n\n// 更改npm默认的下载路径\nnpm config set prefix "D:\\TempDate\\nodedata\\download"\n```\n\n更改缓存路径和下载路径后，再次查看\n\n\n\n```java\nD:\\software\\cmder\\cmder>npm config ls\n\n; userconfig C:\\Users\\DELL\\.npmrc\ncache = "D:\\\\TempDate\\\\nodedata\\\\cache"\nprefix = "D:\\\\TempDate\\\\nodedata\\\\download"\n```\n\n\n\n那么下面来介绍一下,如何创建自己的第一个node模块,并把这个模块上传到npm上面,让别人可以用我们的模块\n# 创建第一个node模块\n\nNode.js模块就是发布到npm的代码包，\n\n> 创建一个新模块的第一步就是创建一个package.json文件。\n> 你可以用npm init来创建package.json文件。\n> 这个过程中命令行会逐步提示你输入这个模块的信息，\n> 其中模块的名字和版本号是必填项\n\n\n> 你还需要一个入口文件，\n> 如果你使用默认值的话，那就会是index.js.\n> 创建完package.json文件之后，你就要开始写代码包里的内容了，\n> 这里举个最简单的例子，在默认的index.js里写一个要导出的函数，\n> 这个函数也就是别人的代码里可以import或者require的。\n\n```jsx\nexports.showMsg = function () {\n  console.log("This is my first module");\n};\n```\n\n这样的话,你的node模块就已经创建完成了\n\n### 如何发布到npm服务器上\n\n##### 注册一个npm账号\n\n##### 首次需要登录,**npm login** 存储证书到本地,后面就不需要每次都登录的\n\n登录需要输入用户名,密码,还有邮箱,这些都是刚刚注册时候填写的\nUserName： (*******)\nPassword： (*******)\nEmial： (*******)\n\n##### 开始发布\n\n**npm publish** 发布包\n\n> 使用 cnpm 的注意报错：\n> no_perms Private mode enable, only admin can publish this module\n> 设置回原本的就可以了\n> **npm config set registry [http://registry.npmjs.org](https://link.jianshu.com?t=http://registry.npmjs.org) **\n> 发布完成之后,如果还想回到之前的cnpm,使用下面的命令\n> **npm config set registry [https://registry.npm.taobao.org](https://link.jianshu.com?t=https://registry.npm.taobao.org)**\n\n### 创建一个案例,引用刚上传的包\n\n​\t\n\n> 假设已经成功发布了，并且包名叫做**toniqian-test-module**，\n> 这时候可以新建一个空目录，cd进去，运行npm install toniqian-test-module，然后在这个目录下会出现一个叫node_modules的文件夹，你之前写的包就会出现在这个文件夹下面。\n\n然后写一个index.js,代码如下\n\n\n\n```jsx\nvar test = require(\'toniqian-test-module\');\ntest.showMsg();\n```\n\n运行index.js\n\n\n\n```css\nnode index.js\n```\n\n那么刚刚上传的包,目前已经可以使用,到目前的话,\n你已经成功创建了一个npm包了\n\n### 如何更新npm包\n\n当你包的内容修改之后,比如\n\n\n\n```jsx\nexports.showMsg = function () {\n  console.log("This is my second module");\n};\n```\n\n> 修改了提示文字,那么我们需要 **npm version <update_type>**\n> **update_type**就是版本号的意思,会自动更新**package.json**里面的版本号\n> 然后重新 **npm publish**,更新就会完成\n\n**作业** 实现一个相对时间转换函数\n\n```jsx\nmoment(time){\n  // 相对时间转换\n}\n```\n\n### 如何删除npm包\n\n```\nnpm unpublish kk-a-test --force\n```\n\n### 查看当前登录的npm账号\n\n```\nnpm whoami\n```\n\n输出 username\n\n# **发布包错误集锦**\n\n1、需要提高版本号\n\n\n\n```ruby\n#1、发包 npm publish 失败\nsh-neverleave:z-tool neverleave$ npm publish\nnpm ERR! publish Failed PUT 400\nnpm ERR! code E400\nnpm ERR! deprecations must be strings : z-tool\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T10_52_01_742Z-debug.log\nsh-neverleave:z-tool neverleave$ npm publish\n\n\n#2、发包 npm publish 失败\nsh-neverleave:z-tool neverleave$ npm publish\nnpm ERR! publish Failed PUT 403\nnpm ERR! code E403\nnpm ERR! You cannot publish over the previously published versions: 1.0.3. : z-tool\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T11_24_57_662Z-debug.log\nsh-neverleave:z-tool neverleave$ \n```\n\n2、发包 npm publish 失败\n 解决方案：终端执行： npm publish --access public\n\n参考：https://stackoverflow.com/questions/53420758/npm-publish-gives-unscoped-packages-cannot-be-private\n\n\n\n```ruby\n#1、发包 npm publish 失败\nsh-neverleave:npm neverleave$ npm publish\nnpm ERR! publish Failed PUT 400\nnpm ERR! code E400\nnpm ERR! unscoped packages cannot be private : z-tool\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T08_44_21_310Z-debug.log\nsh-neverleave:npm neverleave$ \n\n#解决方案：终端执行： npm publish --access public\nsh-neverleave:npm neverleave$ npm publish --access public\n+ z-tool@1.0.0\nsh-neverleave:npm neverleave$ \n```\n\n3、确保登录的用户账号正确\n\n\n\n```swift\nsh-neverleave:npm neverleave$ npm publish\nnpm ERR! publish Failed PUT 404\nnpm ERR! code E404\nnpm ERR! 404 User not found : z-tool\nnpm ERR! 404 \nnpm ERR! 404  \'z-tool\' is not in the npm registry.\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nnpm ERR! 404 \nnpm ERR! 404 Note that you can also install from a\nnpm ERR! 404 tarball, folder, http url, or git url.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T07_32_28_518Z-debug.log\n```\n\n4、登录时需要在username 前加‘~’，具体大家可以验证\n\n\n\n```kotlin\nsh-neverleave:npm neverleave$ npm login\nUsername: (~neverleave) neverleave\nPassword: (<default hidden>) \nEmail: (this IS public) (1063588359@qq.com) \nnpm ERR! code EAUTHIP\nnpm ERR! Unable to authenticate, need: Basic\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T07_27_50_877Z-debug.log\nsh-neverleave:npm neverleave$ \n```\n\n5、无权限删除线上的包（撤包有时间限制，24小时）\n 解决方案：加上 --force\n\n\n\n```bash\nsh-neverleave:z-tool neverleave$ npm unpublish z-tool\nnpm ERR! Refusing to delete entire project.\nnpm ERR! Run with --force to do this.\nnpm ERR! npm unpublish [<@scope>/]<pkg>[@<version>]\nsh-neverleave:z-tool neverleave$ \n\n#解决方案（内部有被鄙视的话，😄 I sure hope you know what you are doing.）\nsh-neverleave:z-tool neverleave$ npm unpublish z-tool --force\nnpm WARN using --force I sure hope you know what you are doing.\n- z-tool\nsh-neverleave:z-tool neverleave$ \n```\n\n6、删除npm市场的包同名的24小时后才能重新发布\n\n\n\n```ruby\nsh-neverleave:z-tool neverleave$ npm publish\nnpm ERR! publish Failed PUT 403\nnpm ERR! code E403\nnpm ERR! z-tool cannot be republished until 24 hours have passed. : z-tool\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T11_41_24_086Z-debug.log\nsh-neverleave:z-tool neverleave$ \n```\n\n',
  tag_ids: [
    '6809637769959178254',
    '6809637767543259144',
    '6809635626879549454'
  ],
  title: '如何发布npm包'
}
